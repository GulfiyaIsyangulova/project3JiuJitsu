{"version":3,"sources":["logo.svg","services/AuthService.js","components/user/Signup.js","components/user/Login.js","components/Navbar.js","components/user/UserProfile.js","components/gyms/DetailsComponent.js","components/googleMap.js","components/gyms/GymIndex.js","components/PlacesAutocomplete.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AuthService","_this","this","Object","classCallCheck","signup","username","password","service","post","then","response","data","login","currentUser","get","logout","axios","create","baseURL","process","withCredentials","Signup","props","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","value","tryToSignUp","preventDefault","uName","state","usernameInput","pWord","passwordInput","toggleForm","getUser","react_default","a","createElement","onSubmit","onChange","Component","Login","tryToLogin","Navbar","theUser","onClick","pleaseLogOut","DetailsComponent","location","console","log","info","style","border","height","borderRadius","width","float","margin","padding","formatted_phone_number","photo","rating","GymIndex","showGyms","allTheGyms","map","gym","i","key","_id","maxWidth","address","editing","Geocode","fromAddress","_response$results$0$g","results","geometry","lat","lng","error","LocationSearchInput","handleSelect","geocodeByAddress","getLatLng","latLng","catch","dist_default","onSelect","_ref","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","filter","types","includes","suggestion","active","backgroundColor","cursor","description","React","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","GymMap","compose","withProps","googleMapURL","loadingElement","containerElement","mapElement","withGoogleMap","react_google_maps_lib","defaultZoom","defaultCenter","geoLocations","marker","index","onToggleOpenInfoWindow","isOpen","onCloseClick","isMarkerShown","App","getAllGyms","concat","responseFromApi","listOfGyms","ready","setTimeout","mapReady","setGeoLocations","toConsumableArray","number","gymInfo","place_id","result","table","details","getCurrentlyLoggedInUser","currentlyLoggedIn","whichForm","theForm","signupShowing","loginShowing","setApiKey","REACT_APP_GEO_CODE_KEY","_this2","googleMap","components_Navbar","user_Signup","user_Login","PlacesAutocomplete_LocationSearchInput","react_router","exact","path","component","render","GymIndex_GymIndex","assign","gyms_DetailsComponent","getData","Boolean","window","hostname","match","ReactDOM","react_router_dom","src_App_0","document","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.e4a39cb8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    let service = axios.create({\n      // baseURL: 'http://localhost:5000/api/auth',\n      baseURL: process.env.REACT_APP_API_URL,\n      withCredentials: true\n    });\n    this.service = service;\n  }\n\n  signup = (username, password) => {\n    return this.service.post('/signup', {username:username, password:password})\n    .then(response => response.data)\n  }\n\n  login = (username, password) =>{\n    return this.service.post('/login', {username, password})\n    .then(response => response.data)\n  }\n\n  currentUser = () =>{\n    return this.service.get('/getcurrentuser')\n    .then(response => response.data)\n  }\n\n\n  logout = () =>{\n    return this.service.post('/logout', {})\n    .then(response => response.data)\n  }\n\n\n}\n\nexport default AuthService;\n","import React, { Component } from 'react';\nimport AuthService from '../../services/AuthService';\n\nclass Signup extends Component {\n  constructor(props){\n    super(props);\n    this.state = { usernameInput: '', passwordInput: '' };\n    this.service = new AuthService();\n  }\n\n  handleChange = (e) =>{\n      this.setState({[e.target.name]: e.target.value})\n  }\n\n  tryToSignUp = (e) =>{\n      e.preventDefault();\n      const uName = this.state.usernameInput;\n      const pWord = this.state.passwordInput;\n    \n    this.service.signup(uName, pWord)\n    .then(()=>{\n        this.props.toggleForm('signup');\n        this.props.getUser();\n    })\n\n  }\n\n  \n\n  render(){\n    return(\n      <form onSubmit = {this.tryToSignUp}>\n\n          <h3>Signup For An Account</h3>\n\n          <legend>Username</legend>\n          <input value={this.state.usernameInput}\n            name=\"usernameInput\"\n            onChange={this.handleChange}\n          />\n\n          <legend>Password</legend>\n          <input value={this.state.passwordInput} \n            name=\"passwordInput\"\n            onChange={this.handleChange}\n          />\n\n\n\n        <button>Submit</button>\n\n      </form>\n    )\n  }\n}\n\nexport default Signup;\n","import React, { Component } from 'react';\nimport AuthService from '../../services/AuthService';\n\nclass Login extends Component {\n  constructor(props){\n    super(props);\n    this.state = { usernameInput: '', passwordInput: '' };\n    this.service = new AuthService();\n  }\n\n  handleChange = (e) =>{\n      this.setState({[e.target.name]: e.target.value})\n  }\n\n  tryToLogin = (e) =>{\n      e.preventDefault();\n      const uName = this.state.usernameInput;\n      const pWord = this.state.passwordInput;\n    \n      this.service.login(uName, pWord)\n      .then(()=>{\n          this.props.toggleForm('login');\n          this.props.getUser();\n\n          // this.props.history.push('/gyms')\n      })\n\n  }\n\n  \n\n  render(){\n    return(\n      <form onSubmit = {this.tryToLogin}>\n\n          <h3>Login</h3>\n\n          <legend>Username</legend>\n          <input value={this.state.usernameInput}\n            name=\"usernameInput\"\n            onChange={this.handleChange}\n          />\n\n          <legend>Password</legend>\n          <input value={this.state.passwordInput} \n            name=\"passwordInput\"\n            onChange={this.handleChange}\n          />\n\n\n\n        <button>Submit</button>\n\n      </form>\n    )\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport {Link, NavLink} from 'react-router-dom';\n\n\n\nfunction Navbar(props){\n\n    const doTheLogout = () =>{\n        props.pleaseLogOut()\n        .then(()=>{\n            props.getUser();\n        })\n\n    }\n\n    return(\n\n\n\n        <nav>\n            {/* {props.theUser && \n        <Link to=\"/projects\" style={{ textDecoration: 'none', margin: '10px' }}>Projects</Link>\n            } */}\n\n\n        {!props.theUser && \n        <span>\n        <button onClick = {()=> props.toggleForm('login')} > Login </button>\n        <button onClick = {()=> props.toggleForm('signup')}>Sign Up</button>\n        </span>\n        }\n\n        {props.theUser && \n        <span>\n\n        <button onClick = {doTheLogout} >Log Out </button>\n\n            <h1>Hello, Welcome to Jiu Jitsu locator {props.theUser.username}!</h1>\n        </span>\n        }\n\n    \n\n\n\n        </nav>\n    )\n\n\n\n\n\n\n\n\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nexport default class UserProfile extends Component{\n    \n}","import React from 'react';\nimport {Link} from 'react-router-dom';\n\n\nfunction DetailsComponent(props){\n    console.log(\"the props in the details >>>>> \", props.info)\n    return(\n        <div style={{border: '0.5px solid grey', height: '300px', borderRadius: '4px', width: '30%', float: 'left', margin: '10px', padding: '10px'}}>\n            This is Details component\n            <h2>{props.info.name}</h2>\n            <h6>{props.info.formatted_phone_number}</h6>\n            {props.info.photo &&\n            // <img src={props.info.photo[0].html_attributions[0].match(^href=(.*)>$)} alt=\"\"/>\n            <h2>hi</h2>\n            }\n            <h6>{props.info.rating}</h6>\n\n            {/* <Link to ={\"/details/\"+props.beer._id}> See Details </Link> */}\n        </div>\n    )\n}\nexport default DetailsComponent;\n","import React from 'react';\nimport { compose, withProps } from \"recompose\"\nimport { GoogleMap, Marker, withGoogleMap, withScriptjs, InfoWindow } from \"react-google-maps\"\n\nlet location;\n\nif (navigator.geolocation) {\n  navigator.geolocation.getCurrentPosition(function (position) {\n    location = { lat: position.coords.latitude, lng: position.coords.longitude }\n  })\n} else {\n  location = { lat: 20, lng: -80 }\n}\n\nconst GymMap = compose(\n    withProps({\n      googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyCpGcRTL6DiWCcICDtehgpbBfr4DYVN__Q\",\n      loadingElement: <div style={{ height: `100%` }} />,\n      containerElement: <div style={{ height: `400px` }} />,\n      mapElement: <div style={{ height: `100%` }} />,\n    }),\n    // withScriptjs,\n    withGoogleMap\n  )((props) =>\n\n\n    <GoogleMap\n      defaultZoom={8}\n      defaultCenter={location}\n    >\n      {props.geoLocations.map((marker, index) => <Marker key={index} position={{lat: marker.lat, lng: marker.lng}} onClick={()=> props.onToggleOpenInfoWindow(index, marker)}>\n        {props.isOpen === index && <InfoWindow onCloseClick={props.onToggleOpenInfoWindow} >\n         <div>\n          <h1>{marker.info.name}</h1>\n          <h2>{marker.info.address}</h2>\n         </div>\n        </InfoWindow>}\n      </Marker>)}\n      {props.isMarkerShown &&\n        <Marker position={location} onClick={props.onToggleOpenInfoWindow}>\n          {props.isOpen && <InfoWindow onCloseClick={props.onToggleOpenInfoWindow}>\n            <h1>test</h1>\n          </InfoWindow>}\n        </Marker>}\n    </GoogleMap>\n  );\n\nexport default GymMap;\n\n\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport Geocode from \"react-geocode\";\n\n\nexport default class GymIndex extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            editing: false,\n        }\n    }\n    showGyms = () =>{\n        const myGyms= this.props.allTheGyms;\n        return myGyms.map((gym, i) => {\n           \n            return (\n                <div key={i} gym = {gym._id}>\n           \n              <h3>{gym.name}</h3>\n           \n            <p style={{maxWidth: '400px'}} >{gym.address} </p>\n\n           </div>\n         \n         \n         )\n    })\n}\nrender(){\n\n    //if(this.props.ready)\n\n    Geocode.fromAddress('{this.props.gym.address}').then(\n        response => {\n          const { lat, lng } = response.results[0].geometry.location;\n          console.log(lat, lng);\n        },\n        error => {\n          console.error(error);\n        }\n      );\n    return (\n        <div>\n\n            <h2>I am a GymsIndex component!!</h2>\n        {this.showGyms}\n        </div>\n    )\n}\n\n}","import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n \nexport default class LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: '' };\n  }\n \n  handleChange = address => {\n    this.setState({ address });\n  };\n \n  handleSelect = address => {\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => console.log('Success', latLng))\n      .catch(error => console.error('Error', error));\n  };\n \n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.state.address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              {...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.filter(e => e.types.includes('health')).map(suggestion => {\n                console.log(suggestion.types.includes('health'))\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    );\n  }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport Signup from './components/user/Signup.js';\nimport Login from './components/user/Login.js';\nimport Navbar from './components/Navbar.js'\nimport UserProfile from './components/user/UserProfile.js';\nimport GymDetails from './components/gyms/DetailsComponent.js';\nimport GymIndex from './components/gyms/GymIndex.js';\nimport AuthService from './services/AuthService.js';\n// import PlacesAutocomplete from 'react-places-autocomplete';\nimport LocationSearchInput from './components/PlacesAutocomplete';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport PropTypes from 'prop-types'; // ES6\nimport 'lodash.debounce'\n\nimport { compose, withProps } from \"recompose\"\nimport { GoogleMap, Marker, withGoogleMap, withScriptjs, InfoWindow } from \"react-google-maps\"\nimport Geocode from \"react-geocode\";\nimport DetailsComponent from './components/gyms/DetailsComponent';\n\n\n\n\n\nimport axios from 'axios';\nimport GymMap from './components/googleMap';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      listOfGyms: [],\n      geoLocations: [],\n      currentlyLoggedIn: null,\n      ready: false,\n      signupShowing: false,\n      loginShowing: false,\n      mapReady: false,\n      isOpen: false,\n      details: {},\n    };\n\n    this.service = new AuthService();\n    Geocode.setApiKey(process.env.REACT_APP_GEO_CODE_KEY);\n\n  }\n\n  componentDidMount() {\n    this.getAllGyms();\n    this.getCurrentlyLoggedInUser();\n  }\n\n  getAllGyms = () => {\n    axios.get(`${process.env.REACT_APP_BASE}gyms`)\n      .then(responseFromApi => {\n        const data = responseFromApi.data;\n\n        this.setState({\n          listOfGyms: data, ready: true\n        });\n\n        console.log(\"GYMS INSIDE CALLBACK!\");\n        console.log(this.state.listOfGyms);\n        setTimeout(() => {\n          this.setState({ mapReady: true })\n        }, 1500)\n        this.setGeoLocations();\n      });\n\n    console.log(\"GYMS OUTSIDE CALLBACK!\");\n    console.log(this.state.listOfGyms);\n  }\n  \n  \n\n  \n  setGeoLocations = () => {\n   \n    console.log(\"GEO LOCATIONs\");\n\n    this.state.listOfGyms.map(gym => {\n      return Geocode.fromAddress(gym.address).then(\n        response => {\n          const { lat, lng } = response.results[0].geometry.location;\n          console.log(\"LATITUDE!!\")\n          console.log(lat, lng);\n          // this.state.geoLocations.push({ lat: lat, lng: lng });\n          this.setState({ geoLocations: [...this.state.geoLocations, { lat: lat, lng: lng, info: gym}] });\n          // console.log(\"GEO LOCATIONS\");\n          // console.log(this.state.geoLocations);\n        },\n        error => {\n          console.error(error);\n        }\n      );\n    });\n  }\n  \n\n  onToggleOpenInfoWindow = (number, gymInfo) => {\n\n    if(gymInfo){\n      //make axios call here\n      // console.log('VVVVVVVVV',gymInfo)\n      \n axios.get(`${process.env.REACT_APP_BASE}gyms/getPlacesDetails/` + gymInfo.info.place_id)\n .then(responseFromApi => {\n      const data = responseFromApi.data.result;\n      // const lat = data.geometry.location.lat;\n      // const lng = data.geometry.location.lng;\n      // const name =data.name;\n      // const icon =data.icon;\n      // const price_level= data.price_level;\n      // const rating= data.rating;\n      // const phone = data.formatted_phone_number;\n      // const address= data.formatted_address;\n      // const website= data.website;\n      // const hours= data.opening_hours.weekday_text;\n      // const reviews= [...data.reviews];\n      // const photoArr= [...data.photo];\n\n      \n\n  console.log('-------------------------',data);\n  console.table('-------------------------',data)\n\n\n//res.json\n\n  this.setState({ isOpen: number , ready: true, details: data})\n      });\n\n    }\n  }\n\n\n  \n\n  getCurrentlyLoggedInUser = () => {\n    this.service.currentUser()\n      .then((theUser) => {\n        this.setState({ currentlyLoggedIn: theUser })\n      })\n      .catch(() => {\n        this.setState({ currentlyLoggedIn: null })\n      })\n  }\n\n\n  toggleForm = (whichForm) => {\n\n    let theForm;\n\n    if (whichForm === \"signup\") {\n      theForm = 'signupShowing'\n    } else {\n      theForm = 'loginShowing'\n    }\n\n    this.setState({ [theForm]: !this.state[theForm] })\n\n\n  }\n\n \n\n  render() {\n\n\n   \n    if (this.state.mapReady)\n      return (\n        <div>\n          <h1>Jiu-Jitsu app</h1>\n\n          <GymMap geoLocations={this.state.geoLocations} onToggleOpenInfoWindow={this.onToggleOpenInfoWindow} isOpen={this.state.isOpen}  />\n\n          <Navbar\n            theUser={this.state.currentlyLoggedIn}\n            pleaseLogOut={() => this.service.logout()}\n            toggleForm={this.toggleForm}\n            getUser={this.getCurrentlyLoggedInUser}\n\n          />\n\n          {this.state.signupShowing &&\n            <Signup getUser={this.getCurrentlyLoggedInUser}\n              toggleForm={this.toggleForm}\n            />\n          }\n\n          {this.state.loginShowing &&\n            <Login getUser={this.getCurrentlyLoggedInUser}\n              toggleForm={this.toggleForm}\n            />\n          }\n          <LocationSearchInput />\n\n          <Switch>\n            <Route exact path=\"/gyms\" component={GymIndex} render={(props) => <GymIndex\n              {...props}\n              theUser={this.state.currentlyLoggedIn}\n              allTheGyms={this.state.listOfGyms} />} />\n\n            <Route exact path=\"/gyms/:theID\" render={(props) => <GymDetails\n              {...props}\n              allTheGyms={this.state.listOfGyms}\n              ready={this.state.ready}\n              getData={this.getAllGyms}\n              theUser={this.state.currentlyLoggedIn}\n            />} />\n\n\n<DetailsComponent info = {this.state.details} />\n\n          </Switch>\n          {this.state.listOfGyms.map((gym, i) => {\n            return (\n              <div key={i}>\n                {/* <h1>{gym.name}</h1> */}\n                {/* <h2>{gym.address}</h2> */}\n\n              </div>\n\n            );\n          })}\n\n\n\n        </div>\n      )\n    else\n      return (\n        <div>\n\n          <div className=\"overlay\"></div>\n        </div>\n      );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}